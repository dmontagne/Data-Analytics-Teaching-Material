gather(variable) %>%
mutate(statistic = as.character(str_split(.$variable, "_")))
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
mutate(statistic = str_split(.$variable, "_")[[2]])
mutate(statistic = (str_split(.$variable, "_")[[2]])
)
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
mutate(statistic = str_split(.$variable, "_"))
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
mutate(statistic = str_split(.$variable, "_"),
statistic = statistic[.][[2]])
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
mutate(statistic = str_split(.$variable, "_"),
statistic = statistic[[2]])
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
mutate(statistic = str_split(.$variable, "_"))
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
mutate(statistic = str_split(.$variable, "_")[[2]])
?split
?separate
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
split(variable, into = c("variable", "statistic"),)
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
split(variable, into = c("variable", "statistic"))
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
split(variable, into = c("variable", "statistic"), sep = "-")
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
split(variable, into = c("var", "statistic"), sep = "-")
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
split(.$variable, into = c("var", "statistic"), sep = "-")
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
separate(variable, into = c("var", "statistic"), sep = "-")
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
separate(variable, into = c("var", "statistic"), sep = "_")
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
separate(variable, into = c("var", "statistic"), sep = "_") %>%
spread(statistic, value)
scf <- scf %>%
mutate(race_labs = ifelse(scf$race == 1, "White",
ifelse(scf$race == 2,"Black",
ifelse(scf$race == 3,"Hispanic",
"Other"))))
table(scf$race_labs)
scf <- scf %>%
mutate(race_labs = ifelse(scf$race == 1, "White",
ifelse(scf$race == 2,"Black",
ifelse(scf$race == 3,"Hispanic",
"Other"))))
table(scf$race_labs)
# What number represents the cuttoff for the top 1%:
quantile(scf$top1, 0.99)
# Use above to create binary variable of who is in the top 1%:
scf <- scf %>%
mutate(top1 = ifelse(networth >= quantile(scf$top1, 0.99), 1, 0))
table(scf$top1)
#Age by number kids
temp1<-table(scf$age.cat, scf$kids)
temp2<-prop.table(temp1, 1)
round(100*temp2)
table(scf$age.cat[scf$top1==0],scf$kids[scf$top1==0])
table(scf$age.cat[scf$top1==1],scf$kids[scf$top1==1])
round(100*prop.table(table(scf$age.cat[scf$top1==0],scf$kids[scf$top1==0]),1))
round(100*prop.table(table(scf$age.cat[scf$top1==1],scf$kids[scf$top1==1]),1))
round(100*prop.table(table(scf$age.cat[scf$top1==0],scf$kids[scf$top1==0]),1))
round(100*prop.table(table(scf$age.cat[scf$top1==1],scf$kids[scf$top1==1]),1))
temp1<-table(scf$age.cat[scf$top1==0],scf$kids[scf$top1==0])
temp2<-prop.table(temp1, 1)
round(100*temp2)
scf <- scf %>%
mutate(race_labs = ifelse(scf$race == 1, "White",
ifelse(scf$race == 2,"Black",
ifelse(scf$race == 3,"Hispanic",
"Other"))),
white = ifelse(race == 1, 1, 0))
table(scf$race_labs)
table(scf$white)
scf99 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
separate(variable, into = c("var", "statistic"), sep = "_") %>%
spread(statistic, value)
# The top 1% of wealth owners:
scf1 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
separate(variable, into = c("var", "statistic"), sep = "_") %>%
spread(statistic, value)
scf1<-scf[scf$top1==1,]
# The top 1% of wealth owners:
scf1 %>% select(married, kids, age) %>%
summarise_all(list(mean = mean, median = median, sd = sd)) %>%
gather(variable) %>%
separate(variable, into = c("var", "statistic"), sep = "_") %>%
spread(statistic, value)
ggplot(data = scf99,aes(x=income,y=networth))+ geom_point()
ggplot(data = scf99,aes(x=age,y=income))+ geom_point()
ggplot(data = scf99,aes(x=income,y=networth))+ geom_point()
ggplot(data = scf99,aes(x=age,y=income))+ geom_point()
hist(scf99$income)
hist(scf$income)
pairs(scf99[,c("age","income","networth")])
pairs(scf99[,c("age","income","networth")])
ggplot(data = scf99,aes(x=income,y=networth,color=age))+geom_point()
ggplot(data=scf99,aes(x=age,y=networth,color=as.factor(married)))+geom_smooth()
pairs(scf99[,c("age","income","networth")])
# What number represents the cuttoff for the top 1%:
quantile(scf$network, 0.99)
# What number represents the cuttoff for the top 1%:
quantile(scf$networth, 0.99)
# Use above to create binary variable of who is in the top 1%:
scf <- scf %>%
mutate(top1 = ifelse(networth >= quantile(scf$networth, 0.99), 1, 0))
knitr::opts_knit$set(root.dir = "~/Documents/GitHub/Data-Analytics-Teaching-Material/")
# read data
scf <- read_dta("rscfp2016.dta")
# lower case variable names
names(scf)<-tolower(names(scf))
# libraries
library(haven)
library(tidyverse)
library(Hmisc)
library(ggplot2)
# read data
scf <- read_dta("rscfp2016.dta")
# lower case variable names
names(scf)<-tolower(names(scf))
# create convenient functions
weighted.median <- function(var,weight) {as.numeric(wtd.quantile(var, weight,.5))}
weighted.sd<-function(var,weight) {sqrt(wtd.var(var,weight))}
table(scf$occat2)
table(scf$numbercarowned)
table(scf$occat2)
table(scf$numbercarowned)
?rename
scf %>% rename(number_cars = NVEHIC)
scf %>% rename(number_cars = nvehic)
scf <- scf %>% rename(number_cars = nvehic)
table(scf$occat2)
table(scf$numbercarowned)
table(scf$number_cars)
scf <- scf %>% <
mutate(prof = ifelse(scf$occat2==1,1,0))
scf <- scf %>%
mutate(prof = ifelse(occat2==1,1,0))
table(scf$prof)
scf$number_cars<-round(scf$number_cars)
scf <- scf %>%
mutate(number_cars = round(number_cars))
weighted.mean(scf$num.car[scf$prof==1],scf$wgt[scf$prof==1])
weighted.mean(scf$number_cars[scf$prof==0],scf$wgt[scf$prof==0])
weighted.mean(scf$number_cars[scf$prof==1],scf$wgt[scf$prof==1])
summary(glm(num.car ~ prof, data=scf,weights=wgt))
summary(glm(number ~ prof, data=scf,weights=wgt))
summary(glm(number_cars ~ prof, data=scf,weights=wgt))
tidy(glm(number_cars ~ prof, data=scf,weights=wgt))
broom::tidy(glm(number_cars ~ prof, data=scf,weights=wgt))
table(scf$kids)
cor(scf$kids,scf$number_cars)
cor(scf$kids,scf$prof)
summary(glm(num.car ~ prof + kids, data=scf,weights=wgt))
summary(glm(number_cars ~ prof + kids, data=scf,weights=wgt))
summary(glm(number_cars ~ prof + kids + age + edcl, data=scf,weights=wgt))$coefficients
scf$edcl <- factor(scf$edcl)
summary(glm(num.car ~ prof + kids + age + edcl, data=scf,weights=wgt))$coefficients
summary(glm(number_cars ~ prof + kids + age + edcl, data=scf,weights=wgt))$coefficients
summary(glm(number_cars ~ prof + kids + age + edcl + married + hhsex + white + turndown, data=scf,weights=wgt))$coefficients
m1 <- glm(number_cars ~ prof + kids, data=scf,weights=wgt)
to.predict<-data.frame(prof=0,
kids=1
)
predict(m1,to.predict)
to.predict<-data.frame(prof=1,
kids=5
)
predict(m1,to.predict)
to.predict<-data.frame(prof=c(0,0,0,0,0,0,1,1,1,1,1,1),
kids=c(0,1,2,3,4,5,0,1,2,3,4,5)
)
num.car<-predict(m1,to.predict)
vizdf<-cbind(to.predict,num.car)
vizdf
ggplot(data=vizdf,aes(x=kids,y=num.car,group=prof,color=factor(prof)))+
geom_line()
vizdf <- cbind(to.predict,number_cars)
num.car <- predict(m1,to.predict)
vizdf <- cbind(to.predict,number_cars)
vizdf <- cbind(to.predict,num.car)
vizdf
ggplot(data=vizdf,aes(x=kids,y=number),group=prof,color=factor(prof)))+
geom_line()
ggplot(data = vizdf, aes(x = kids, y = number),
group = prof, color = factor(prof)))+
geom_line()
library(scales)
ggplot(data=vizdf,aes(x=kids,y=num.car,group=prof,color=factor(prof)))+
geom_line(size=3) +
labs(title="Predicted Number of Cars by Kids and Professional Status",x="Kids",y="Number Cars", color="Professional")+
scale_y_continuous(breaks=pretty_breaks())+
scale_x_continuous(breaks=pretty_breaks(),limits = c(0,5))+
theme(
plot.title = element_text(size=18),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
axis.text = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
ggplot(data=vizdf,aes(x=kids,y=num.car,group=prof,color=factor(prof)))+
geom_line(size=2) +
labs(title="Predicted Number of Cars by Kids and Professional Status",x="Kids",y="Number Cars", color="Professional")+
scale_y_continuous(breaks=pretty_breaks())+
scale_x_continuous(breaks=pretty_breaks(),limits = c(0,5))+
theme(
plot.title = element_text(size=18),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
axis.text = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
ggplot(data = vizdf, aes(x = kids, y = number),
group = prof, color = factor(prof)))+
geom_line()
ggplot(data = vizdf, aes(x = kids, y = number),
group = prof, color = factor(prof)))+
geom_line()
ggplot(data = vizdf, aes(x = kids, y = number),
group = prof, color = factor(prof)))+
geom_line()
ggplot(data = vizdf, aes(x = kids, y = number),
group = prof, color = factor(prof)) +
geom_line()
ggplot(data = vizdf, aes(x = kids, y = number),
group = prof) +
geom_line()
ggplot(data = vizdf, aes(x = kids, y = number),
color = prof) +
geom_line()
vizdf
ggplot(data = vizdf, aes(x = kids, y = num.car),
color = prof) +
geom_line()
ggplot(data = vizdf, aes(x = kids, y = num.car),
group = prof, color = factor(prof)) +
geom_line()
ggplot(data=vizdf,aes(x=kids,y=num.car,group=prof,color=factor(prof)))+
geom_line(size=2) +
labs(title="Predicted Number of Cars by Kids and Professional Status",x="Kids",y="Number Cars", color="Professional")+
scale_y_continuous(breaks=pretty_breaks())+
scale_x_continuous(breaks=pretty_breaks(),limits = c(0,5))+
theme(
plot.title = element_text(size=18),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
axis.text = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
ggplot(data = vizdf, aes(x = kids, y = num.car),
group = prof, color = factor(prof)) +
geom_line()
vizdf
ggplot(data = vizdf, aes(x = kids, y = num.car, color = factor(prof)),
group = prof) +
geom_line()
ggplot(data = vizdf, aes(x = kids, y = num.car, color = factor(prof))) +
geom_line()
ggplot(data=vizdf,aes(x=kids,y=num.car,group=prof,color=factor(prof)))+
geom_line(size=2) +
labs(title="Predicted Number of Cars by Kids and Professional Status",x="Kids",y="Number Cars", color="Professional")+
scale_y_continuous(breaks=pretty_breaks())+
scale_x_continuous(breaks=pretty_breaks(),limits = c(0,5))+
theme(
plot.title = element_text(size=18),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
axis.text = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
ggplot(data = vizdf, aes(x = kids, y = num.car, color = factor(prof))) +
geom_line()
library(scales)
ggplot(data=vizdf,aes(x=kids,y=num.car,group=prof,color=factor(prof)))+
geom_line() +
labs(title="Predicted Number of Cars by Kids and Professional Status",x="Kids",y="Number Cars", color="Professional")+
scale_y_continuous(breaks=pretty_breaks())+
scale_x_continuous(breaks=pretty_breaks(),limits = c(0,5))+
theme(
plot.title = element_text(size=18),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
axis.text = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
ggplot(data=vizdf,aes(x=kids,y=num.car,group=prof,color=factor(prof)))+
geom_line(1.5) +
labs(title="Predicted Number of Cars by Kids and Professional Status",x="Kids",y="Number Cars", color="Professional")+
scale_y_continuous(breaks=pretty_breaks())+
scale_x_continuous(breaks=pretty_breaks(),limits = c(0,5))+
theme(
plot.title = element_text(size=18),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
axis.text = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
ggplot(data=vizdf,aes(x=kids,y=num.car,group=prof,color=factor(prof)))+
geom_line(size = 1.5) +
labs(title="Predicted Number of Cars by Kids and Professional Status",x="Kids",y="Number Cars", color="Professional")+
scale_y_continuous(breaks=pretty_breaks())+
scale_x_continuous(breaks=pretty_breaks(),limits = c(0,5))+
theme(
plot.title = element_text(size=18),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
axis.text = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
ggplot(data=scf,aes(x=prof,y=num.car,weight=wgt))+
geom_smooth(method = "glm")
ggplot(data=scf,aes(x=prof,y=number_cars,weight=wgt))+
geom_smooth(method = "glm")
ggplot(data=scf,
aes(x = kids, y = num.car, weight = wgt, group = prof))+
geom_smooth(method = "glm")
ggplot(data=scf,
aes(x = kids, y = number_cars, weight = wgt, group = prof))+
geom_smooth(method = "glm")
ggplot(data=scf,
aes(x = kids, y = number_cars, weight = wgt, color = prof))+
geom_smooth(method = "glm")
ggplot(data=scf,
aes(x = kids, y = number_cars, weight = wgt, color = factor(prof)))+
geom_smooth(method = "glm")
ggplot(data=scf,
aes(x = kids, y = num.car, weight = wgt,
group = prof, color = factor(prof))) +
geom_smooth(method = "glm") +
labs(title="OLS Slopes for Number of Cars by Kids and Professional Status",
x="Kids",y="Number Cars",
color="Professional")+
scale_y_continuous(breaks=pretty_breaks())+
scale_x_continuous(breaks=pretty_breaks(),limits = c(0,5))+
theme(
plot.title = element_text(size=18),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
axis.text = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
ggplot(data=scf,
aes(x = kids, y = number_cars, weight = wgt,
group = prof, color = factor(prof))) +
geom_smooth(method = "glm") +
labs(title="OLS Slopes for Number of Cars by Kids and Professional Status",
x="Kids",y="Number Cars",
color="Professional")+
scale_y_continuous(breaks=pretty_breaks())+
scale_x_continuous(breaks=pretty_breaks(),limits = c(0,5))+
theme(
plot.title = element_text(size=18),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
axis.text = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
scf <- scf %>%
mutate(number_cars = round(number_cars)) %>%
white = ifelse(race == 1, 1, 0))
scf <- scf %>%
mutate(number_cars = round(number_cars) %>%
white = ifelse(race == 1, 1, 0))
mutate(number_cars = round(number_cars,
)
scf <- scf %>%
mutate(number_cars = round(number_cars,
white = ifelse(race == 1, 1, 0)))
scf <- scf %>%
mutate(number_cars = round(number_cars),
white = ifelse(race == 1, 1, 0)))
scf <- scf %>%
mutate(number_cars = round(number_cars),
white = ifelse(race == 1, 1, 0))
summary(glm(number_cars ~ prof, data=scf, weights=wgt))$coefficients
knitr::opts_knit$set(root.dir = "~/Documents/GitHub/Data-Analytics-Teaching-Material/")
# some edits we might want
scf<-as.data.frame(scf)
scf$num.car<-round(scf$numbercarowned)
rm(list = ls())
# libraries
library(haven)
library(tidyverse)
library(Hmisc)
library(ggplot2)
library(scales)
# read data
scf <- read_dta("rscfp2016.dta")
# lower case variable names
names(scf)<-tolower(names(scf))
# create convenient functions
weighted.median<-function(var,weight) {as.numeric(wtd.quantile(var,
weight,.5))}
weighted.sd<-function(var,weight) {sqrt(wtd.var(var,weight))}
# some edits we might want
scf<-as.data.frame(scf)
scf$num.car<-round(scf$numbercarowned)
scf$nochk<-round(scf$nochk)
scf$kids<-round(scf$kids)
scf$owncar<-round(scf$owncar)
scf <- scf %>% rename(number_cars = nvehic,
owned_car = own) %>%
mutate(nochk = round(nochk),
kids = round(kids),
owned_car = round(owned_car))
# read data
scf <- read_dta("rscfp2016.dta")
# lower case variable names
names(scf)<-tolower(names(scf))
# some edits we might want
scf<-as.data.frame(scf)
scf <- scf %>% rename(number_cars = nvehic,
owned_car = own) %>%
mutate(nochk = round(nochk),
kids = round(kids),
owned_car = round(owned_car))
summary(glm(owncar ~ kids+nochk, data=scf, weights=wgt))$coefficient
scf <- scf %>% rename(number_cars = nvehic,
owncar = own) %>%
mutate(nochk = round(nochk),
kids = round(kids),
owncar = round(owncar))
# read data
scf <- read_dta("rscfp2016.dta")
# lower case variable names
names(scf)<-tolower(names(scf))
# some edits we might want
scf<-as.data.frame(scf)
scf <- scf %>% rename(number_cars = nvehic,
owncar = own) %>%
mutate(nochk = round(nochk),
kids = round(kids),
owncar = round(owncar))
summary(glm(owncar ~ kids+nochk, data=scf, weights=wgt))$coefficient
summary(glm(owncar ~ kids+nochk, data=scf, family=binomial(link='logit'),
weights=wgt/mean(wgt)))$coefficient
hist(scf$number_cars,breaks=0:6,right=F)
number_cars
hist(scf$number_cars,breaks=0:6,right=F)
hist(scf$number_cars, right=F)
summary(glm(num.car ~ kids+nochk, data=scf,weights=wgt))$coefficient
summary(glm(number_cars ~ kids+nochk, data=scf,weights=wgt))$coefficient
summary(glm(number_cars ~ kids+nochk, data=scf, family="poisson",
weights=wgt/mean(wgt)))$coefficient
set.seed(1);ggplot(data=scf,aes(x=jitter(kids,.00001),y=number_cars,weight=wgt))+
geom_smooth(span=.999,se=F,size=2)+
geom_smooth(method="glm",color="red",se=F,size=2)+
labs(title="OLS slope vs. Real slope",x="Kids",y="Number Cars", color="OLS")+
scale_y_continuous(breaks=pretty_breaks())+
scale_x_continuous(breaks=pretty_breaks())+
theme(
plot.title = element_text(size=18),
axis.title.x = element_text(size=15),
axis.title.y = element_text(size=15),
axis.text = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
knitr::opts_knit$set(root.dir = "~/Documents/GitHub/Data-Analytics-Teaching-Material/")
rm(list = ls())
load("/Users/dmontagne/Dropbox/montagne_ars_code/computational_sociology_papers.Rdata")
View(comp_soc)
load("/Users/dmontagne/Dropbox/montagne_ars_code/computational_sociology_papers.Rdata")
from_online <- getURL("https://raw.github.com/dmontagne/Data-Analytics-Teaching-Material/blob/master/rscfp2016.dta")
library(RCurl)
install.packages("RCurl")
library(RCurl)
from_online <- getURL("https://raw.github.com/dmontagne/Data-Analytics-Teaching-Material/blob/master/rscfp2016.dta")
rm(from_online)
